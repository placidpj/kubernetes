# Deployment script for deployment below.
# Below kubectl code will generate the deployment script for the deployment.
# D:\workspace\kubernetes\currency-conversion-service>kubectl get deployment currency-conversion -o yaml >> deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    deployment.kubernetes.io/revision: "1"
  labels:
    app: currency-conversion
  name: currency-conversion
  namespace: default
spec:
  replicas: 2  # how many pods we want
  selector:
    matchLabels:
      app: currency-conversion  # Deployment is applicable for all the pods which have this matching lable
  strategy:
    rollingUpdate:  # how an update, to this deployment is done
      maxSurge: 25%  # how many new instances be created when we are doing release
      maxUnavailable: 25%  # how many instances can be unavailable when we are doing the release
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: currency-conversion  # To entire pod we are attaching the label, so this is the lable that is attached to every container in the pod.
    spec:
      containers:
      - image: placidpj/kubernetes-currency-conversion-service:0.0.12-SNAPSHOT
        imagePullPolicy: IfNotPresent
        name: kubernetes-currency-conversion-service
        env:
        - name: CURRENCY_EXCHANGE_URI
          value: http://currency-exchange
      restartPolicy: Always # if there is any problem with the container you can restart them.

# Add 3 hyphen(-) below to seperate deployment from service deployment script. 
# Added deployment script for service details below. Below kubectl code will generate the deployment script for the service.
# D:\workspace\kubernetes\currency-conversion-service>kubectl get service currency-conversion -o yaml >> service.yaml
---
apiVersion: v1
kind: Service  # service matches against the deployment.
metadata:
  annotations:
    cloud.google.com/neg: '{"ingress":true}'
  labels:
    app: currency-conversion
  name: currency-conversion
  namespace: default 
spec:
  allocateLoadBalancerNodePorts: true
  ports:
  - port: 8100
    protocol: TCP
    targetPort: 8100
  selector:
    app: currency-conversion  # On above ports expose deployment that matches this lables.
  sessionAffinity: None  # For web application we want sessionAffinity because in one session all the requests must go to same instance.
  type: LoadBalancer  # Type of the service we want to use is load balancer.
